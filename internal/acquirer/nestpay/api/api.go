package api

import (
	"bytes"
	"context"
	"encoding/xml"
	"errors"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"testStand/internal/acquirer/helper"
)

// Endpoints
const (
	PaymentEndpoint = "fim/api"
	AuthEndpoint    = "fim/est3dgate"
)

type Client struct {
	baseAddress string
	storeKey    string
	currency    string
	client      *http.Client
}

// NewClient
func NewClient(ctx context.Context, baseAddress, storeKey string, currency string, timeout *int) *Client {
	client := http.DefaultClient
	return &Client{
		baseAddress: baseAddress,
		storeKey:    storeKey,
		currency:    currency,
		client:      client,
	}
}

// MakePayment
func (c *Client) MakePayment(ctx context.Context, request *CC5Request) (*CC5Response, error) {
	err := c.makeAuth(ctx, request)
	if err != nil {
		return nil, err
	}

	body, err := xml.Marshal(request)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPost, helper.JoinUrl(c.baseAddress, PaymentEndpoint), bytes.NewReader(body))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/xml")

	resp, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	response := &CC5Response{}
	err = xml.NewDecoder(resp.Body).Decode(&response)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// makeAuth
func (c *Client) makeAuth(ctx context.Context, request *CC5Request) error {
	random := helper.RandomString(10)

	authParams := url.Values{
		// "hash": REQUIRED!!! Generated by other values; see createHash function
		"clientid":                        {request.ClientId},
		"storetype":                       {"3d_pay"},
		"oid":                             {request.TxnId},
		"trantype":                        {request.TransType},
		"amount":                          {strconv.Itoa(int(request.Amount))},
		"currency":                        {c.currency},
		"lang":                            {"en"},
		"rnd":                             {random},
		"pan":                             {request.CardNumber},
		"Ecom_Payment_Card_ExpDate_Year":  {request.ExpYear},
		"Ecom_Payment_Card_ExpDate_Month": {request.ExpMonth},
		"cv2":                             {request.CVV},
		"encoding":                        {"utf-8"},
		"hashAlgorithm":                   {"ver3"},
	}

	hash := createHash(authParams, c.storeKey)
	if len(hash) == 0 {
		return errors.New("hash is empty")
	}
	authParams.Add("hash", hash)

	bodyReader := bytes.NewReader([]byte(authParams.Encode()))

	req, err := http.NewRequest(http.MethodPost, helper.JoinUrl(c.baseAddress, AuthEndpoint), bodyReader)
	if err != nil {
		return err
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := c.client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	text, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	response, err := url.ParseQuery(string(text))
	if err != nil {
		return err
	}

	if len(response.Get("ErrMsg")) != 0 {
		return errors.New(response.Get("ErrMsg"))
	}
	status, err := strconv.Atoi(response.Get("mdStatus"))
	if err != nil {
		return err
	}

	if status < 1 || status > 4 {
		switch status {
		case 0:
			return errors.New("3d secure authentication failed")
		case 5, 7, 8:
			return errors.New("mpi fallback")
		default:
			return errors.New("status is not full or half 3d secure")
		}
	}

	request.PayerCAVV = response.Get("cavv")
	request.PayerECI = response.Get("eci")
	request.PayerXID = response.Get("xid")
	request.CardNumber = response.Get("md")
	request.TransId = response.Get("TransID")

	return nil
}
